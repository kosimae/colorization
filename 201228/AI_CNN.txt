# https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html
# 위의 사이트에 첨부된 코드 사용

# import libraries
import torch
import torchvision
import torchvision.transforms as transforms

# Dataset
# pytorch가 이 data set에 대해서만 아래의 편리한 함수를 제시
# 다른 data set에 대해서는 제공하지 않음
# project에서는 data을 read 하는 작업이 필요하다.

transform = transforms.Compose(
    [transforms.ToTensor(), # tensor로 변환
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)

trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

# Define the function to show the image
import matplotlib.pyplot as plt
import numpy as np                

# functions to show an image
def imshow(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


# get some random training images
dataiter = iter(trainloader)
images, labels = dataiter.next()

# show images
imshow(torchvision.utils.make_grid(images))

# print labels
print(' '.join('%5s' % classes[labels[j]] for j in range(4)))

# Define the convolutional neural network
import torch.nn as nn
import torch.nn.functional as F

# convolution layer
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)         # 2-dim에 대해서 convolution, input channel 3, output channel 6
        self.pool = nn.MaxPool2d(2, 2)          # maxpool의 output은 size가 1/2
        self.conv2 = nn.Conv2d(6, 16, 5)        # input channel 6, output channel 16, kernel size 5
        self.fc1 = nn.Linear(16 * 5 * 5, 120)   # kernel size 5x5, 6 channel개의 weight, 다음 node은 120개
        self.fc2 = nn.Linear(120, 84)           # 120개의 node을 84개의 node와 연결
        self.fc3 = nn.Linear(84, 10)            # 84개의 node을 10개의 node(class number)와 연결

    # forward 함수를 사용하여 실행
    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))    # x을 convolution1에 넣은 후 relu을 통과하고 pool을 한다.
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

net = Net()

# optimizer
import torch.optim as optim

criterion = nn.CrossEntropyLoss()                               # cross entropy
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9) # gradient discent

# training
# batch size is 5, 5장씩 1묶음으로 network로 넣으므로 100장을 돌리려면 20번을 돌려야 한다.
# 1장씩 넣으면 network가 불안정해진다.

for epoch in range(2):  # loop over the dataset multiple times

    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):   # batch size을 위함
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data

        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0

print('Finished Training')

# save weight
PATH = './cifar_net.pth'
torch.save(net.state_dict(), PATH)

net = Net()
net.load_state_dict(torch.load(PATH))

dataiter = iter(testloader)
images, labels = dataiter.next()

# print images
imshow(torchvision.utils.make_grid(images))
print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))

# Accuracy 55%
correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))

# Accuracy by class
class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs, 1)
        c = (predicted == labels).squeeze()
        for i in range(4):
            label = labels[i]
            class_correct[label] += c[i].item()
            class_total[label] += 1


for i in range(10):
    print('Accuracy of %5s : %2d %%' % (
        classes[i], 100 * class_correct[i] / class_total[i]))







